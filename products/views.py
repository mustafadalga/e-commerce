from django.views.generic import ListView,DetailView,Viewfrom django.shortcuts import render,redirectfrom .models import Product,ProductFilefrom django.http import Http404,HttpResponseRedirectfrom carts.models import Cartfrom analytics.mixins import ObjectViewedMixinfrom django.contrib.auth.mixins import LoginRequiredMixinfrom django.contrib import messagesfrom orders.models import ProductPurchaseclass ProductFeaturedListView(ListView):    template_name = "products/list.html"    def get_queryset(self,*args,**kwargs):        request=self.request        return Product.objects.all().featured()class ProductFeaturedDetailView(ObjectViewedMixin,DetailView):    queryset = Product.objects.all().featured()    template_name = "products/featured-detail.html"class UserProductHistoryView(LoginRequiredMixin,ListView):    template_name = "products/user-history.html"    def get_context_data(self,*args, **kwargs):        context=super(UserProductHistoryView,self).get_context_data(*args,**kwargs)        cart_obj, new_obj = Cart.objects.new_or_get(self.request)        context['cart']=cart_obj        return context    def get_queryset(self,*args,**kwargs):        request=self.request        views=request.user.objectviewed_set.by_model(Product,model_queryset=False)        return viewsclass ProductListView(ListView):    queryset = Product.objects.all()    template_name = "products/list.html"    def get_context_data(self,*args, **kwargs):        context=super(ProductListView,self).get_context_data(*args,**kwargs)        cart_obj, new_obj = Cart.objects.new_or_get(self.request)        context['cart']=cart_obj        return contextdef product_list_view(request):    queryset = Product.objects.all()    context={     'object_list':queryset    }    return render(request,"products/list.html",context)class ProductDetailSlugView(ObjectViewedMixin,DetailView):    queryset = Product.objects.all()    template_name = "products/detail.html"    def get_context_data(self,*args, **kwargs):        context=super(ProductDetailSlugView,self).get_context_data(*args,**kwargs)        cart_obj, new_obj = Cart.objects.new_or_get(self.request)        context['cart']=cart_obj        return contextclass ProductDownloadView(View):    def get(self,request,*args,**kwargs):        slug=kwargs.get("slug")        pk=kwargs.get("pk")        download_qs=ProductFile.objects.filter(pk=pk,product__slug=slug)        if download_qs.count() != 1:            raise Http404("Download not found")        download_obj=download_qs.first()        can_download=False        user_ready=True        if download_obj.user_required:            if not request.user.is_authenticated:                user_ready=False        purchased_products=Product.objects.none()        if download_obj.free:            can_download=True        else:            purchased_products=ProductPurchase.objects.products_by_id(request)            file_product_id = ProductFile.objects.filter(pk=pk).values("product_id").first()['product_id']            if file_product_id in purchased_products:                can_download=True        if not can_download or not user_ready:            messages.error(request,"You don't have access to download this item")            return redirect(download_obj.get_default_url())        aws_filepath=download_obj.generate_download_url()        return HttpResponseRedirect(aws_filepath)class ProductDetailView(ObjectViewedMixin,DetailView):    queryset = Product.objects.all()    template_name = "products/detail.html"    def get_context_data(self, *, object_list=None, **kwargs):        context=super(ProductDetailView,self).get_context_data(**kwargs)        context['abc']=123        return context    def get_object(self, *args,**kwargs):        request=self.request        pk=self.kwargs.get('pk')        instance = Product.objects.get_by_id(pk)        if instance is None:            raise Http404("Ürün bulunamadı CLASS")        return instancedef product_detail_view(request,pk=None,*args,**kwargs):    instance=Product.objects.get_by_id(pk)    if instance is None:        raise Http404("Ürün bulunamadı")    context={     'object':instance,    }    return render(request,"products/detail.html",context)